BEGIN; -- submissions references contests which is defined later

CREATE EXTENSION unaccent;

-- user stuff

CREATE TYPE theme_type AS enum (
    'light',
    'dark'
);


CREATE TABLE IF NOT EXISTS users (
	id 					bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at			timestamptz	NOT NULL DEFAULT NOW(),
	name 				text 	  	NOT NULL UNIQUE,
	admin 				boolean 	NOT NULL DEFAULT false,
	proposer 			boolean		NOT NULL DEFAULT false,
	email 				text 	  	NOT NULL UNIQUE,
	password 			text 	  	NOT NULL,
	bio 				text 		NOT NULL DEFAULT '',
    generated           boolean     NOT NULL DEFAULT false,
	
	verified_email 		boolean		NOT NULL DEFAULT false,
	email_verif_sent_at timestamptz,

	preferred_language  text        NOT NULL DEFAULT 'ro',
    preferred_theme     theme_type  NOT NULL DEFAULT 'dark',

    name_change_required boolean NOT NULL DEFAULT false,
    locked_login boolean NOT NULL DEFAULT false
);

CREATE TABLE IF NOT EXISTS username_change_history (
    user_id     bigint      NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    changed_at  timestamptz NOT NULL,
    name    text        NOT NULL
);

-- problem stuff

CREATE TYPE scoring_type AS enum (
    'max_submission',
    'sum_subtasks'
);

CREATE TABLE IF NOT EXISTS problems (
	id 			  	bigint 			    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at 	  	timestamptz 		NOT NULL DEFAULT NOW(),
	name 		  	text 	    		NOT NULL,
	test_name 	  	text      			NOT NULL,
	time_limit 	  	double precision 	NOT NULL DEFAULT 0.1,
	memory_limit  	integer   			NOT NULL DEFAULT 65536,

	source_size   	integer   			NOT NULL DEFAULT 30000,
	console_input 	boolean 			NOT NULL DEFAULT false,
	visible 	  	boolean 			NOT NULL DEFAULT false,

	source_credits 	text				NOT NULL DEFAULT '',
	default_points 	integer 			NOT NULL DEFAULT 0,
    scoring_strategy scoring_type NOT NULL DEFAULT 'max_submission',

    published_at timestamptz
);

CREATE TABLE IF NOT EXISTS tests (
	id 			bigint 			GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at 	timestamptz		NOT NULL DEFAULT NOW(),
	score 		integer 		NOT NULL,
	problem_id  bigint			NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
	visible_id  bigint 			NOT NULL,
);


CREATE TABLE IF NOT EXISTS subtasks (
	id 			bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at  timestamptz NOT NULL DEFAULT NOW(),
	problem_id 	bigint 		NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
	visible_id 	integer 	NOT NULL,
	score 		integer 	NOT NULL
);

CREATE TABLE IF NOT EXISTS subtask_tests (
    subtask_id bigint NOT NULL REFERENCES subtasks(id) ON DELETE CASCADE ON UPDATE CASCADE,
    test_id bigint NOT NULL REFERENCES tests(id) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE (subtask_id, test_id)
);

-- blog posts

CREATE TABLE IF NOT EXISTS blog_posts (
	id 				bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at		timestamptz	NOT NULL DEFAULT NOW(),
    author_id       bigint      NOT NULL REFERENCES users(id) ON DELETE CASCADE,

    title           text        NOT NULL,

    slug            text        NOT NULL UNIQUE, 
    visible         boolean     NOT NULL DEFAULT FALSE,

    published_at timestamptz
);

-- contests

CREATE TABLE IF NOT EXISTS contests (
	id 					bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at			timestamptz	NOT NULL DEFAULT NOW(),
	name 				text 	  	NOT NULL UNIQUE,

    public_join         boolean     NOT NULL DEFAULT true,
    start_time          timestamptz NOT NULL,
    end_time            timestamptz NOT NULL,
    max_sub_count       integer     NOT NULL DEFAULT 30,

    virtual             boolean     NOT NULL DEFAULT false,
    visible             boolean     NOT NULL DEFAULT false,

    per_user_time       integer     NOT NULL DEFAULT 0, -- seconds
    register_during_contest boolean NOT NULL DEFAULT false,

    description         text        NOT NULL DEFAULT '',

    public_leaderboard boolean NOT NULL DEFAULT FALSE

    CHECK (start_time <= end_time)
);

CREATE TYPE pbaccess_type AS ENUM (
    'editor',
    'viewer'
); 

CREATE TABLE IF NOT EXISTS contest_user_access (
    contest_id  bigint           NOT NULL REFERENCES contests(id) ON DELETE CASCADE ON UPDATE CASCADE,
    user_id     bigint           NOT NULL REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    access      pbaccess_type    NOT NULL,

    UNIQUE (contest_id, user_id)
);

CREATE TABLE IF NOT EXISTS contest_problems (
    contest_id bigint NOT NULL REFERENCES contests(id) ON DELETE CASCADE,
    problem_id bigint NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
    position bigint NOT NULL DEFAULT 0,
    UNIQUE (contest_id, problem_id)
);

CREATE TABLE IF NOT EXISTS contest_registrations (
	created_at	    timestamptz  NOT NULL DEFAULT NOW(),
    user_id         bigint       NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    contest_id      bigint       NOT NULL REFERENCES contests(id) ON DELETE CASCADE,

    individual_start_at timestamptz,
    individual_end_at timestamptz,

    UNIQUE (user_id, contest_id)
);

CREATE TABLE IF NOT EXISTS contest_questions (
    id             bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author_id      bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    contest_id     bigint NOT NULL REFERENCES contests(id) ON DELETE CASCADE,
    question       text   NOT NULL,
    created_at 	   timestamptz NOT NULL DEFAULT NOW(),

    responded_at   timestamptz,
    response       text
);

CREATE TABLE IF NOT EXISTS contest_announcements (
    id             bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contest_id     bigint NOT NULL REFERENCES contests(id) ON DELETE CASCADE,
    announcement   text   NOT NULL,
    created_at 	   timestamptz NOT NULL DEFAULT NOW()
);


-- submissions stuff

CREATE TYPE status AS ENUM (
	'creating',
	'waiting',
	'working',
	'finished'
);

CREATE TABLE IF NOT EXISTS submissions (
	id 				bigint 			GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at 		timestamptz		NOT NULL DEFAULT NOW(),
	user_id 		bigint			NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	problem_id 		bigint  		NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
    contest_id      bigint          REFERENCES contests(id) ON DELETE SET NULL,
	language		text 			NOT NULL,
	code 			text 			NOT NULL,
	status 			status 			NOT NULL DEFAULT 'creating',
	compile_error 	boolean,
	compile_message text,
	score 			integer			NOT NULL DEFAULT 0,
	max_time 		DOUBLE PRECISION NOT NULL DEFAULT -1,
	max_memory 		INTEGER 		NOT NULL DEFAULT -1,
    code_size       INTEGER         NOT NULL GENERATED ALWAYS AS (length(code)) STORED
);

CREATE TABLE IF NOT EXISTS submission_tests (
	id 				bigint 			    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at 		timestamptz			NOT NULL DEFAULT NOW(),
	done			boolean 			NOT NULL DEFAULT false,
	verdict 		text         		NOT NULL DEFAULT '',
	time 			double precision	NOT NULL DEFAULT 0,
	memory 			integer				NOT NULL DEFAULT 0,
	score 			integer				NOT NULL DEFAULT 0,
	test_id			bigint  			REFERENCES tests(id) ON DELETE SET NULL,
	user_id 		bigint  			NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	submission_id 	bigint  			NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    contest_id      bigint              REFERENCES contests(id) ON DELETE SET NULL,

    -- copied from problem test
    visible_id      bigint              NOT NULL,
    max_score       bigint              NOT NULL
);

CREATE TABLE IF NOT EXISTS submission_subtasks (
    id              bigint 			GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at      timestamptz     NOT NULL DEFAULT NOW(),
    submission_id   bigint          NOT NULL REFERENCES submissions(id) ON DELETE CASCADE ON UPDATE CASCADE,
    contest_id      bigint          REFERENCES contests(id) ON DELETE SET NULL,

    final_percentage bigint DEFAULT NULL,

    -- user_id might be useful in the future
    -- if I ever implement a cross-submission total score system
    user_id         bigint          NOT NULL REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    
    -- Might be useful to also store subtask id, just in case, even if it may never be properly used
    subtask_id      bigint          REFERENCES subtasks(id) ON DELETE SET NULL ON UPDATE CASCADE,

    -- Copy attributes from subtask
	problem_id 	    bigint 		    NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
	visible_id 	    integer 	    NOT NULL,
	score 		    integer 	    NOT NULL,
    UNIQUE (submission_id, subtask_id)
);

CREATE TABLE IF NOT EXISTS submission_subtask_subtests (
    submission_subtask_id   bigint NOT NULL REFERENCES submission_subtasks(id) ON DELETE CASCADE ON UPDATE CASCADE,
    submission_test_id      bigint NOT NULL REFERENCES submission_tests(id) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE (submission_subtask_id, submission_test_id)
);

CREATE TABLE IF NOT EXISTS submission_pastes (
    paste_id        text    NOT NULL UNIQUE,
    submission_id   bigint  NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    author_id       bigint  NOT NULL REFERENCES users(id) ON DELETE CASCADE 
);

CREATE TABLE IF NOT EXISTS problem_lists (
	id 			bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at 	timestamptz NOT NULL DEFAULT NOW(),
	author_id 	bigint 		NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	title 		text 		NOT NULL DEFAULT '',
    sidebar_hidable boolean NOT NULL DEFAULT false,
	description text 		NOT NULL DEFAULT ''
);

CREATE TABLE IF NOT EXISTS problem_list_problems (
    pblist_id bigint NOT NULL REFERENCES problem_lists(id) ON DELETE CASCADE ON UPDATE CASCADE,
    problem_id bigint NOT NULL REFERENCES problems(id) ON DELETE CASCADE ON UPDATE CASCADE,
    position bigint NOT NULL DEFAULT 0,
    UNIQUE (pblist_id, problem_id)
);

CREATE TABLE IF NOT EXISTS problem_list_pblists (
    parent_id bigint NOT NULL REFERENCES problem_lists(id) ON DELETE CASCADE ON UPDATE CASCADE,
    child_id bigint NOT NULL REFERENCES problem_lists(id) ON DELETE CASCADE ON UPDATE CASCADE,
    position bigint NOT NULL DEFAULT 0,
    UNIQUE (parent_id, child_id),
	CHECK (parent_id != child_id)
);

CREATE TABLE IF NOT EXISTS sessions (
	id 			text 		PRIMARY KEY,
	created_at 	timestamptz NOT NULL DEFAULT NOW(),
	user_id 	integer 	NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    expires_at  timestamptz NOT NULL
);

CREATE TABLE IF NOT EXISTS verifications (
	id 			text 		PRIMARY KEY,
	created_at 	timestamptz NOT NULL DEFAULT NOW(),
	user_id 	integer 	NOT NULL REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS pwd_reset_requests (
	id 			text 		PRIMARY KEY,
	created_at 	timestamptz NOT NULL DEFAULT NOW(),
	user_id 	integer 	NOT NULL REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS attachments (
	id 			bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at 	timestamptz NOT NULL DEFAULT NOW(),
	visible 	boolean 	NOT NULL DEFAULT true,
	private 	boolean 	NOT NULL DEFAULT false,
    execable    boolean     NOT NULL DEFAULT false,

	name 		text 		NOT NULL,
	data 		bytea 		NOT NULL,
	data_size 	INTEGER 	GENERATED ALWAYS AS (length(data)) STORED,

    last_updated_at timestamptz NOT NULL DEFAULT NOW(),
    last_updated_by bigint REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS problem_attachments_m2m (
	problem_id 	    bigint 		NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
	attachment_id 	bigint 		NOT NULL REFERENCES attachments(id) ON DELETE CASCADE,
    UNIQUE (problem_id, attachment_id)
);

CREATE TABLE IF NOT EXISTS blog_post_attachments_m2m (
	blog_post_id    bigint 		NOT NULL REFERENCES blog_posts(id) ON DELETE CASCADE,
	attachment_id 	bigint 		NOT NULL REFERENCES attachments(id) ON DELETE CASCADE,
    UNIQUE (blog_post_id, attachment_id)
);

CREATE TABLE IF NOT EXISTS audit_logs (
    id          bigint 			GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    logged_at   timestamptz     NOT NULL DEFAULT NOW(),
    system_log  boolean         NOT NULL DEFAULT false,
    msg         text            NOT NULL DEFAULT '',
    author_id   bigint          DEFAULT null REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS problem_user_access (
    problem_id  bigint           NOT NULL REFERENCES problems(id) ON DELETE CASCADE ON UPDATE CASCADE,
    user_id     bigint           NOT NULL REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    access      pbaccess_type    NOT NULL,

    UNIQUE (problem_id, user_id)
);

-- tags


CREATE TYPE tag_type AS ENUM (
    'author',
    'contest',
    'method',
    'other'
); 


CREATE TABLE IF NOT EXISTS tags (
    id      bigint      GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    text        NOT NULL UNIQUE,
    type    tag_type    NOT NULL
);

CREATE TABLE IF NOT EXISTS problem_tags (
    tag_id      bigint  NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
    problem_id  bigint  NOT NULL REFERENCES problems(id) ON DELETE CASCADE,
    position    bigint  NOT NULL DEFAULT 0,
    UNIQUE (tag_id, problem_id)
);

-- views

---- moved to 002.fractional_score.sql

-- indexes

---- username history

CREATE INDEX IF NOT EXISTS username_change_history_uid ON username_change_history(user_id);

---- pblists

CREATE INDEX IF NOT EXISTS pblist_problems_index ON problem_list_problems (pblist_id);
CREATE INDEX IF NOT EXISTS pblist_pblists_index ON problem_list_pblists (parent_id);

---- submissions

CREATE INDEX IF NOT EXISTS problem_user_submissions_index ON submissions (user_id, problem_id);
CREATE INDEX IF NOT EXISTS problem_submissions_index ON submissions (problem_id);
CREATE INDEX IF NOT EXISTS contest_submissions_index ON submissions (contest_id);

CREATE INDEX IF NOT EXISTS submission_subtests_index ON submission_tests (submission_id);
CREATE INDEX IF NOT EXISTS submission_subtests_tests_index ON submission_tests (test_id);
CREATE INDEX IF NOT EXISTS submission_subtasks_index ON submission_subtasks (submission_id);
CREATE INDEX IF NOT EXISTS submission_subtasks_score_index ON submission_subtasks (user_id, problem_id);

---- subtask subtests
CREATE INDEX IF NOT EXISTS stk_stest_m2m_stk_index ON submission_subtask_subtests (submission_subtask_id);
CREATE INDEX IF NOT EXISTS stk_stest_m2m_stest_index ON submission_subtask_subtests (submission_test_id);

---- problems

CREATE INDEX IF NOT EXISTS problem_access_index ON problem_user_access (problem_id);
CREATE INDEX IF NOT EXISTS problem_attachments_index ON attachments (problem_id);
CREATE INDEX IF NOT EXISTS problem_tests_index ON tests (problem_id);
CREATE INDEX IF NOT EXISTS problem_visibility_index ON problems (visible);

---- blogs

CREATE INDEX IF NOT EXISTS blog_post_slug ON blog_posts (slug);
CREATE INDEX IF NOT EXISTS blog_post_author ON blog_posts (author_id);

---- contests

CREATE INDEX IF NOT EXISTS contest_access_index ON contest_user_access (contest_id);
CREATE INDEX IF NOT EXISTS contest_problems_index ON contest_problems (contest_id);
CREATE INDEX IF NOT EXISTS contest_registrations_index ON contest_registrations (contest_id);
CREATE INDEX IF NOT EXISTS contest_questions_index ON contest_questions (contest_id);
CREATE INDEX IF NOT EXISTS contest_announcements_index ON contest_announcements (contest_id);

---- tags

CREATE INDEX IF NOT EXISTS problem_tag_problems ON problem_tags (problem_id);

---- misc

CREATE VIEW active_sessions AS SELECT * FROM sessions WHERE NOW() < expires_at;

-- triggers

CREATE OR REPLACE FUNCTION insert_username_change() RETURNS TRIGGER AS $$
    BEGIN
        IF OLD.name IS DISTINCT FROM NEW.name THEN
            INSERT INTO username_change_history (user_id, changed_at, name) VALUES (NEW.id, NOW(), NEW.name); 
        END IF;
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER username_change_inserts 
    AFTER INSERT OR UPDATE OF name 
    ON users
    FOR EACH ROW
    EXECUTE FUNCTION insert_username_change();

COMMIT;
