
CREATE TABLE IF NOT EXISTS blog_posts (
	id 				bigint 	    GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	created_at		timestamptz	NOT NULL DEFAULT NOW(),
    author_id       bigint      NOT NULL REFERENCES users(id) ON DELETE CASCADE,

    title           text        NOT NULL,

    slug            text        NOT NULL UNIQUE, 
    visible         boolean     NOT NULL DEFAULT FALSE
);

CREATE INDEX IF NOT EXISTS blog_post_slug ON blog_posts (slug);
CREATE INDEX IF NOT EXISTS blog_post_author ON blog_posts (author_id);

CREATE TABLE IF NOT EXISTS blog_post_attachments_m2m (
	blog_post_id    bigint 		NOT NULL REFERENCES blog_posts(id) ON DELETE CASCADE,
	attachment_id 	bigint 		NOT NULL REFERENCES attachments(id) ON DELETE CASCADE,
    UNIQUE (blog_post_id, attachment_id)
);

--CREATE TABLE IF NOT EXISTS user_followers (
--    followee_id     bigint      NOT NULL REFERENCES users(id) ON DELETE CASCADE,  
--    follower_id     bigint      NOT NULL REFERENCES users(id) ON DELETE CASCADE,  
--    UNIQUE (followee_id, follower_id)
--);

--CREATE INDEX IF NOT EXISTS user_followers_followee ON user_followers (followee_id);
--CREATE INDEX IF NOT EXISTS user_followers_follower ON user_followers (follower_id);

CREATE VIEW blog_post_attachments AS 
    SELECT  atts.id AS id, 
            atts.created_at AS created_at, 
            atts.last_updated_at AS last_updated_at, 
            atts.last_updated_by AS last_updated_by, 
            atts.visible AS visible, 
            atts.private AS private,
            atts.execable AS execable,
            atts.name AS name,
            atts.data AS data,
            atts.data_size AS data_size,
            bpam.blog_post_id AS blog_post_id 
    FROM attachments atts, blog_post_attachments_m2m bpam 
    WHERE atts.id = bpam.attachment_id;

