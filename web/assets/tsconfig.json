{
    "compilerOptions": {
      /* Projects */
      // "incremental": true,                              /* Enable incremental compilation */
      // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
      // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
      // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
      // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
      // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
  
      /* Language and Environment */
      "target": "es2021",                                     
      "lib": [
          "DOM",
          "DOM.Iterable",
          "ES2021",
          //"ScriptHost" // For ActiveXObject
      ],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
      "jsx": "react-jsx",                                /* Specify what JSX code is generated. */
      // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
      // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    //   "jsxFactory": "h",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    //   "jsxFragmentFactory": "Fragment",                    /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
      "jsxImportSource": "preact",
      //"jsxImportSource": "preact",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
      // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
      // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
      // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
  
      /* Modules */
      "module": "ES2020",                                /* Specify what module code is generated. */
      "rootDir": "./",                                  /* Specify the root folder within your source files. */
      "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
      // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
      // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
      // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
      // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
      // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
      // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
      "resolveJsonModule": true,                        /* Enable importing .json files */
      // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */
  
      /* JavaScript Support */
      // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
      // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
      // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */
  
      /* Emit */
      //"outFile": "../static/bundle.js",                                  
      //"removeComments": true,
      "noEmitOnError": true,
      "noEmit": true,
  
      "isolatedModules": true,                          
      "esModuleInterop": true,                             
      "forceConsistentCasingInFileNames": true,            
  
      "strict": true,                                     
      "alwaysStrict": true,
      "noImplicitAny": false,
  
      "skipLibCheck": true                               
    }
  }
  
